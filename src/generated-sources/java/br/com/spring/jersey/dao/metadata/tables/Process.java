/*
 * This file is generated by jOOQ.
*/
package br.com.spring.jersey.dao.metadata.tables;


import br.com.spring.jersey.dao.metadata.App;
import br.com.spring.jersey.dao.metadata.Keys;
import br.com.spring.jersey.dao.metadata.tables.records.ProcessRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Process extends TableImpl<ProcessRecord> {

    private static final long serialVersionUID = 1898500788;

    /**
     * The reference instance of <code>app.process</code>
     */
    public static final Process PROCESS = new Process();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessRecord> getRecordType() {
        return ProcessRecord.class;
    }

    /**
     * The column <code>app.process.id_process</code>.
     */
    public final TableField<ProcessRecord, Integer> ID_PROCESS = createField("id_process", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>app.process.name</code>.
     */
    public final TableField<ProcessRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

    /**
     * The column <code>app.process.purpose</code>.
     */
    public final TableField<ProcessRecord, String> PURPOSE = createField("purpose", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>app.process</code> table reference
     */
    public Process() {
        this("process", null);
    }

    /**
     * Create an aliased <code>app.process</code> table reference
     */
    public Process(String alias) {
        this(alias, PROCESS);
    }

    private Process(String alias, Table<ProcessRecord> aliased) {
        this(alias, aliased, null);
    }

    private Process(String alias, Table<ProcessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return App.APP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProcessRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROCESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProcessRecord> getPrimaryKey() {
        return Keys.KEY_PROCESS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProcessRecord>> getKeys() {
        return Arrays.<UniqueKey<ProcessRecord>>asList(Keys.KEY_PROCESS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Process as(String alias) {
        return new Process(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Process rename(String name) {
        return new Process(name, null);
    }
}
